# ===========================================
# Normal load plugins
# ===========================================

# dein 
[[plugins]] 
repo='Shougo/dein.vim'

# deinのui
[[plugins]] 
repo='wsdjeg/dein-ui.vim' 
depends='dein.vim' 

# ddcとかの依存
[[plugins]]
repo='vim-denops/denops.vim'

# カラースキーマ
[[plugins]] 
repo='joshdick/onedark.vim' 
hook_add = ''' 
    let g:onedark_hide_endofbuffer=1
	set background=dark 
    au MyAutoCmd VimEnter * nested colorscheme onedark
'''

[[plugins]] 
repo='vim-airline/vim-airline-themes' 
depends='vim-airline' 
hook_add=''' 
	let g:airline_theme='onedark' 
	let g:airline_highlighting_cache=1
''' 

# ステータスライン 
[[plugins]] 
repo='vim-airline/vim-airline' 
hook_add=''' 
	let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#formatter = 'jsformatter'
    " バッファ移動
    nmap <C-p> <Plug>AirlineSelectPrevTab
    nmap <C-n> <Plug>AirlineSelectNextTab
''' 

[[plugins]]
repo='ryanoasis/vim-devicons'
hook_add='''
    " Powerline Fontsを利用
    let g:airline_powerline_fonts = 1
'''


# migemo検索 
[[plugins]] 
repo='rhysd/migemo-search.vim' 
hook_add=''' 
	if executable('cmigemo') 
		cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>" 
	endif 
''' 

# カッコとか関連をsaコマンドで行えるように
[[plugins]]
repo='machakann/vim-sandwich'
hook_add='''
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    nmap ys <Plug>(operator-sandwich-add)
    nmap <silent>ds <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    nmap <silent>cs <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    vmap S <Plug>(operator-sandwich-add)
'''

# .(繰り返し)を強化
[[plugins]]
repo='tpope/vim-repeat'




# 括弧の色付け 
[[plugins]] 
repo='luochen1990/rainbow' 
hook_add=''' 
    let g:rainbow_active = 1    " set to 0 if you want to enable it later via :RainbowToggle
    let g:rainbow_conf = {
    \	'separately': {
    \		'*': {},
    \		'mugen': {
    \			'parentheses': ['start=/(/ end=/)/ fold'], 
    \		},
    \	}
    \}
''' 


# ファイラ
[[plugins]] 
repo='lambdalisue/fern.vim' 
hook_add=''' 
    " Ctrl+nでファイルツリーを表示/非表示する
    nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=40<CR>
    " 隠しファイル表示
    let g:fern#default_hidden=1
''' 

# ファイラのアイコン
[[plugins]]
repo='lambdalisue/nerdfont.vim'

[[plugins]]
repo='lambdalisue/fern-renderer-nerdfont.vim'
depends='nerdfont.vim'
hook_add=''' 
    " アイコン表示
    let g:fern#renderer = 'nerdfont'
''' 


# ファイラの色づけ
[[plugins]] 
repo='lambdalisue/glyph-palette.vim' 
depends='fern.vim'
hook_add=''' 
    " アイコンに色をつける
    augroup my-glyph-palette
      autocmd! *
      autocmd FileType fern call glyph_palette#apply()
      autocmd FileType nerdtree,startify call glyph_palette#apply()
    augroup END
''' 


# ヤンクしたところが光る
[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
  let g:highlightedyank_highlight_duration = 200
'''

# git操作
[[plugins]]
repo='tpope/vim-fugitive'
hook_add='''
    nnoremap <leader>ga :Git add -A<CR><CR>
    nnoremap <leader>gc :Git commit<CR><CR>
    nnoremap <leader>gs :Git<CR>
    nnoremap <leader>gps :Git push<CR>
    nnoremap <leader>gpl :Git pull<CR>
    nnoremap <leader>gd :Git diff<CR>
    nnoremap <leader>gl :Git log<CR>
    nnoremap <leader>gb :Git blame<CR>
'''

# スムーススクロール
[[plugins]]
repo = 'monaqa/smooth-scroll.vim'
hook_add='''
    let g:smooth_scroll_interval = 1000.0 / 60  " スクロール時間の単位 [ms]
    let g:smooth_scroll_no_default_key_mappings = 1 " <C-f> などを再定義したいとき

    " smooth_scroll#flick の引数には スクロール行数、スクロール時間、方向を指定
    nnoremap <silent> <C-f> :call smooth_scroll#flick(winheight(0), 10)<CR>
    nnoremap <silent> <C-b> :call smooth_scroll#flick(-winheight(0), 10)<CR>
    nnoremap <silent> <C-d> :call smooth_scroll#flick(winheight(0) / 2, 5)<CR>
    nnoremap <silent> <C-u> :call smooth_scroll#flick(-winheight(0) / 2, 5)<CR>

    " スクロールの仕方。 linear, quadratic, cubic, quintic から指定（デフォルト：quadratic）
    " 次数を高めるほど速度の不連続点が減る
    let g:smooth_scroll_scrollkind = "cubic"
'''

# カーソル移動を楽に
[[plugins]]
repo='easymotion/vim-easymotion'
hook_add='''
    " smartcase
    let g:EasyMotion_smartcase = 1

    " hjklモーション
    map <Leader>l <Plug>(easymotion-lineforward)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    map <Leader>h <Plug>(easymotion-linebackward)

    " s{char}{char} to move to {char}{char}
    map <leader>s <Plug>(easymotion-bd-f2)
    nmap <leader>s <Plug>(easymotion-overwin-f2)

    " Move to line
    map <leader>L <Plug>(easymotion-bd-jk)
    nmap <leader>L <Plug>(easymotion-overwin-line)
'''

# vim-preciousの依存
[[plugins]]
repo='Shougo/context_filetype.vim'

# カーソル位置でfieltypeを切り替える
[[plugins]]
repo='osyo-manga/vim-precious'
depends=['context_filetype.vim']

# コメントアウト
[[plugins]]
repo='tpope/vim-commentary'

# pum
[[plugins]]
repo='Shougo/pum.vim'
hook_add='''
    inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
    inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
    inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
    " <S-TAB>: completion back. ddc.vim
    inoremap <expr><S-TAB>  pum#visible() ? '<C-p>' : '<C-h>'
'''

# LSP
[[plugins]]
repo='prabirshrestha/vim-lsp'
hook_add='''
    function! s:on_lsp_buffer_enabled() abort
        setlocal omnifunc=lsp#complete
        if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
        nnoremap <buffer> gd <plug>(lsp-definition)
        nnoremap <buffer> gs <plug>(lsp-document-symbol-search)
        nnoremap <buffer> gS <plug>(lsp-workspace-symbol-search)
        nnoremap <buffer> gr <plug>(lsp-references)
        nnoremap <buffer> gi <plug>(lsp-implementation)
        nnoremap <buffer> gt <plug>(lsp-type-definition)
        nnoremap <buffer> <leader>rn <plug>(lsp-rename)
        nnoremap <buffer> g[ <plug>(lsp-previous-diagnostic)
        nnoremap <buffer> g] <plug>(lsp-next-diagnostic)
        nnoremap <buffer> K <plug>(lsp-hover)

        let g:lsp_format_sync_timeout = 1000
        autocmd! BufWritePre <buffer> call execute('LspDocumentFormatSync')
        
        " refer to doc to add more commands
    endfunction
    augroup lsp_install
        au!
        " call s:on_lsp_buffer_enabled only for languages that has the server registered.
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_signs_enabled = 0
    let g:lsp_diagnostics_echo_cursor = 1
    let g:asyncomplete_auto_popup = 1
    let g:asyncomplete_auto_completeopt = 0
    let g:asyncomplete_popup_delay = 200
    let g:lsp_text_edit_enabled = 1
'''
# LSPの導入を簡単にするやつ
[[plugins]]
repo='mattn/vim-lsp-settings'
on_source = 'vim-lsp'
hook_post_source = '''
  " エラーハイライト
  highlight link LspWarningHighlight Error
'''
# LSPのアイコン
[[plugins]]
repo='mattn/vim-lsp-icons'
