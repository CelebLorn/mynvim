# dein 
[[plugins]] 
repo='Shougo/dein.vim'

# deinのui
[[plugins]] 
repo='wsdjeg/dein-ui.vim' 
depends='dein.vim' 

# カラースキーマ
[[plugins]] 
repo='morhetz/gruvbox' 
hook_add = ''' 
    let g:gruvbox_italicize_comments=0
	set background=dark 
    au MyAutoCmd VimEnter * nested colorscheme gruvbox
'''

[[plugins]] 
repo='vim-airline/vim-airline-themes' 
depends='vim-airline' 
hook_add=''' 
	let g:airline_theme='gruvbox' 
''' 

# ステータスライン 
[[plugins]] 
repo='vim-airline/vim-airline' 
hook_add=''' 
	let g:airline#extensions#tabline#enabled = 1 
    let g:airline#extensions#tabline#formatter = 'jsformatter'
    " バッファ移動
    nmap <C-p> <Plug>AirlineSelectPrevTab
    nmap <C-n> <Plug>AirlineSelectNextTab
''' 

[[plugins]]
repo='ryanoasis/vim-devicons'
hook_add='''
    " Powerline Fontsを利用
    let g:airline_powerline_fonts = 1
'''


# migemo検索 
[[plugins]] 
repo='rhysd/migemo-search.vim' 
hook_add=''' 
	if executable('cmigemo') 
		cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>" 
	endif 
''' 


# カッコとか関連をsaコマンドで行えるように
[[plugins]]
repo='machakann/vim-sandwich'
hook_add='''
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    nmap ys <Plug>(operator-sandwich-add)
    nmap <silent>ds <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    nmap <silent>cs <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    vmap S <Plug>(operator-sandwich-add)
'''

# .(繰り返し)を強化
[[plugins]]
repo='tpope/vim-repeat'

# ファジーファインダー
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
repo = 'Shougo/ddu-kind-file'
[[plugins]]
repo='Shougo/ddu.vim'
hook_add='''
    call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [
    \     {
    \       'name': 'file_rec',
    \       'params': {
    \         'ignoredDirectories': ['.git', 'node_modules', 'vendor', '.next', '.vscode']
    \       }
    \     }
    \   ],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ['matcher_substring'],
    \     },
    \   },
    \   'filterParams': {
    \     'matcher_substring': {
    \       'highlightMatched': 'Title',
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   },
    \   'uiParams': {
    \     'ff': {
    \       'startFilter': v:true,
    \       'prompt': '> ',
    \       'split': 'floating',
    \     }
    \   },
    \ })



    autocmd FileType ddu-ff call s:ddu_my_settings()
    function! s:ddu_my_settings() abort
      nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>

      nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>

      nnoremap <buffer><silent> a
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>

      nnoremap <buffer><silent> p
        \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>

      nnoremap <buffer><silent> <Esc>
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>

      nnoremap <buffer><silent> jj
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
    endfunction

    autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
    function! s:ddu_filter_my_settings() abort
      inoremap <buffer><silent> <CR>
        \ <Esc><Cmd>close<CR>

      inoremap <buffer><silent> <Esc>
        \ <Esc><Cmd>close<CR>

      nnoremap <buffer><silent> <CR>
        \ <Cmd>close<CR>

      nnoremap <buffer><silent> <Esc>
        \ <Cmd>close<CR>

      nnoremap <buffer><silent> jj
        \ <Cmd>close<CR>
    endfunction

    nmap <silent> ,f <Cmd>call ddu#start({})<CR>
'''


# カッコとかを閉じる
[[plugins]]
repo='cohama/lexima.vim'

# 括弧の色付け 
[[plugins]] 
repo='luochen1990/rainbow' 
hook_add=''' 
    let g:rainbow_active = 1    " set to 0 if you want to enable it later via :RainbowToggle
    let g:rainbow_conf = {
    \	'separately': {
    \		'*': {},
    \		'mugen': {
    \			'parentheses': ['start=/(/ end=/)/ fold'], 
    \		},
    \	}
    \}
''' 


# ファイラ
[[plugins]] 
repo='lambdalisue/fern.vim' 
hook_add=''' 
    " Ctrl+nでファイルツリーを表示/非表示する
    nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=40<CR>
    " 隠しファイル表示
    let g:fern#default_hidden=1
''' 

# ファイラのアイコン
[[plugins]]
repo='lambdalisue/nerdfont.vim'

[[plugins]]
repo='lambdalisue/fern-renderer-nerdfont.vim'
depends='nerdfont.vim'
hook_add=''' 
    " アイコン表示
    let g:fern#renderer = 'nerdfont'
''' 


# ファイラの色づけ
[[plugins]] 
repo='lambdalisue/glyph-palette.vim' 
depends='fern.vim'
hook_add=''' 
    " アイコンに色をつける
    augroup my-glyph-palette
      autocmd! *
      autocmd FileType fern call glyph_palette#apply()
      autocmd FileType nerdtree,startify call glyph_palette#apply()
    augroup END
''' 

# スニペット
[[plugins]]
repo='Shougo/neosnippet.vim'
hook_source='''
    " Plugin key-mappings. neosnippet.vim
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior. neosnippet.vim
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ '\<Plug>(neosnippet_expand_or_jump)' : '\<TAB>'

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''

[[plugins]]
repo='Shougo/neosnippet-snippets'
on_source='neosnippet.vim'
hook_source='''
    " Enable snipMate compatibility feature.
    let g:neosnippet#enable_snipmate_compatibility = 1
    " Tell Neosnippet about the other snippets
    let g:neosnippet#snippets_directory=$VIM_CONFIG_DIR .. '\snippets'
'''

# ヤンクしたところが光る
[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
  let g:highlightedyank_highlight_duration = 300
'''

# git操作
[[plugins]]
repo='tpope/vim-fugitive'
hook_add='''
    nnoremap <leader>ga :Git add -A<CR><CR>
    nnoremap <leader>gc :Git commit<CR><CR>
    nnoremap <leader>gs :Git<CR>
    nnoremap <leader>gps :Git push<CR>
    nnoremap <leader>gpl :Git pull<CR>
    nnoremap <leader>gd :Git diff<CR>
    nnoremap <leader>gl :Git log<CR>
    nnoremap <leader>gb :Git blame<CR>
'''

# スムーススクロール
[[plugins]]
repo = 'monaqa/smooth-scroll.vim'
hook_add='''
    let g:smooth_scroll_interval = 1000.0 / 60  " スクロール時間の単位 [ms]
    let g:smooth_scroll_no_default_key_mappings = 1 " <C-f> などを再定義したいとき

    " smooth_scroll#flick の引数には スクロール行数、スクロール時間、方向を指定
    nnoremap <silent> <C-f> :call smooth_scroll#flick(winheight(0), 10)<CR>
    nnoremap <silent> <C-b> :call smooth_scroll#flick(-winheight(0), 10)<CR>
    nnoremap <silent> <C-d> :call smooth_scroll#flick(winheight(0) / 2, 5)<CR>
    nnoremap <silent> <C-u> :call smooth_scroll#flick(-winheight(0) / 2, 5)<CR>

    " スクロールの仕方。 linear, quadratic, cubic, quintic から指定（デフォルト：quadratic）
    " 次数を高めるほど速度の不連続点が減る
    let g:smooth_scroll_scrollkind = "cubic"
'''

# カーソル移動を楽に
[[plugins]]
repo='easymotion/vim-easymotion'
hook_add='''
    " smartcase
    let g:EasyMotion_smartcase = 1

    " migemo有効化
    let g:EasyMotion_use_migemo = 1


    " hjklモーション
    map <Leader>l <Plug>(easymotion-lineforward)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    map <Leader>h <Plug>(easymotion-linebackward)
'''
