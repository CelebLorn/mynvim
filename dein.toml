# dein 
[[plugins]] 
repo='Shougo/dein.vim'

# deinのui
[[plugins]] 
repo='wsdjeg/dein-ui.vim' 
depends='dein.vim' 


# カラースキーマ
[[plugins]] 
repo='morhetz/gruvbox' 
hook_add = ''' 
    let g:gruvbox_italicize_comments=0
	set background=dark 
    au MyAutoCmd VimEnter * nested colorscheme gruvbox
'''

[[plugins]] 
repo='vim-airline/vim-airline-themes' 
depends='vim-airline' 
hook_add=''' 
	let g:airline_theme='gruvbox' 
''' 

# ステータスライン 
[[plugins]] 
repo='vim-airline/vim-airline' 
hook_add=''' 
	let g:airline#extensions#tabline#enabled = 1 
    let g:airline#extensions#tabline#formatter = 'jsformatter'
    " バッファ移動
    nmap <C-p> <Plug>AirlineSelectPrevTab
    nmap <C-n> <Plug>AirlineSelectNextTab
''' 


# migemo検索 
[[plugins]] 
repo='rhysd/migemo-search.vim' 
hook_add=''' 
	if executable('cmigemo') 
		cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>" 
	endif 
''' 


# カッコとか関連をsaコマンドで行えるように
[[plugins]]
repo='machakann/vim-sandwich'
hook_add='''
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    nmap ys <Plug>(operator-sandwich-add)
    nmap <silent>ds <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
    nmap <silent>cs <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
'''

# .(繰り返し)を強化
[[plugins]]
repo='tpope/vim-repeat'

# fzfで曖昧検索
[[plugins]]
repo='junegunn/fzf'
build_on='''
    ./install -all
'''
[[plugins]]
repo = 'junegunn/fzf.vim'

# カッコとかを閉じる
[[plugins]]
repo='cohama/lexima.vim'

# 括弧の色付け 
[[plugins]] 
repo='luochen1990/rainbow' 
hook_add=''' 
    let g:rainbow_active = 1    " set to 0 if you want to enable it later via :RainbowToggle
    let g:rainbow_conf = {
    \	'separately': {
    \		'*': {},
    \		'mugen': {
    \			'parentheses': ['start=/(/ end=/)/ fold'], 
    \		},
    \	}
    \}
''' 

# スニペット
[[plugins]]
repo='Shougo/neosnippet.vim'
hook_add='''
    " Plugin key-mappings. neosnippet.vim
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior. neosnippet.vim
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ '\<Plug>(neosnippet_expand_or_jump)' : '\<TAB>'

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''

[[plugins]]
repo='Shougo/neosnippet-snippets'
hook_add='''
    " Enable snipMate compatibility feature.
    let g:neosnippet#enable_snipmate_compatibility = 1
    " Tell Neosnippet about the other snippets
    let g:neosnippet#snippets_directory=$VIM_CONFIG_DIR .. '\snippets'
'''

# ファイラ
[[plugins]] 
repo='lambdalisue/fern.vim' 
hook_add=''' 
    " Ctrl+nでファイルツリーを表示/非表示する
    nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=40<CR>
''' 
# ファイラの色づけ
[[plugins]] 
repo='lambdalisue/glyph-palette.vim' 
depends='fern.vim'
hook_add=''' 
    " アイコンに色をつける
    augroup my-glyph-palette
      autocmd! *
      autocmd FileType fern call glyph_palette#apply()
      autocmd FileType nerdtree,startify call glyph_palette#apply()
    augroup END
''' 
