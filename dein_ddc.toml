# ===========================================
# ddc.vim toml
# ===========================================

# ddc source
# 辞書から
[[plugins]]
repo='matsui54/ddc-dictionary'
on_source='ddc.vim'
# 周囲から
[[plugins]]
repo='Shougo/ddc-around'
on_source='ddc.vim'
# コマンドから
[[plugins]]
repo='Shougo/ddc-source-cmdline'
on_source='ddc.vim'
# 過去コマンドから
[[plugins]]
repo='Shougo/ddc-source-cmdline-history'
on_source='ddc.vim'
# LSPから
[[plugins]]
repo='shun/ddc-source-vim-lsp'
on_source='ddc.vim'

# ddc filter
# 重複削除
[[plugins]]
repo='Shougo/ddc-filter-converter_remove_overlap'
on_source='ddc.vim'
# ファジー一致
[[plugins]]
repo='tani/ddc-fuzzy'
on_source='ddc.vim'


# ddc UI pum.vimと連携
[[plugins]]
repo='Shougo/ddc-ui-pum'
on_source = 'ddc.vim'
depends=['pum.vim']

# ポップアップでプレビュー
[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
    call signature_help#enable()
'''
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
    call popup_preview#enable()
'''


# 補完
[[plugins]]
repo='Shougo/ddc.vim'
depends='denops.vim'
on_event = ['InsertEnter']
hook_source='''
    " uiの設定
    call ddc#custom#patch_global('ui', 'pum')

    " Use matcher_fuzzy and sorter_fuzzy.
    call ddc#custom#patch_global('sourceOptions', {
          \ '_': {
          \   'matchers': ['matcher_fuzzy'],
          \   'sorters': ['sorter_fuzzy'],
          \   'converters': ['converter_fuzzy']
          \},
          \ })

    " Customize global setting
    " Use around source.
    " https://github.com/Shougo/ddc-around
    call ddc#custom#patch_global('sources', [
                \ 'vim-lsp',
                \ 'around',
                \ 'cmdline',
                \ 'cmdline-history',
                \ ])

    " Change source options
    call ddc#custom#patch_global('sourceOptions', {
          \ 'around': {'mark': 'Ard'},
          \ 'cmdline': {'mark': 'Cmd'},
          \ 'cmdline-history': {'mark': 'Hst'},
          \ 'vim-lsp': {
          \     'mark': 'LSP',
          \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
          \     },
          \ })
    call ddc#custom#patch_global('sourceParams', {
          \ 'around': {'maxSize': 500},
          \ })

    " mugen独自の設定
    call ddc#custom#patch_filetype(['mugen'],'sources', ['dictionary'])

    call ddc#custom#patch_filetype(['mugen'],'sourceOptions', {
          \ '_': {'matchers': ['matcher_fuzzy']},
          \ 'dictionary': {'mark': 'Dct'},
          \ })

    call ddc#custom#patch_filetype(['mugen'],'sourceParams', {
            \ 'dictionary': {'dictPaths': 
            \ [
            \   expand($VIM_CONFIG_DIR .. '/dict/mugen_trigger.dict'),
            \   expand($VIM_CONFIG_DIR .. '/dict/mugen_statectrler.dict'),
            \   expand($VIM_CONFIG_DIR .. '/dict/mugen_param.dict'),
            \   expand($VIM_CONFIG_DIR .. '/dict/mugen_mytrig.dict'),
            \   expand($VIM_CONFIG_DIR .. '/dict/mugen_redirect.dict'),
            \ ],
            \ 'smartCase': v:true,
            \ 'showMenu': v:false,
            \ }
            \})

    " 補完実行判定関数
    function! JudgeDoComplation() abort
        if col('.') <= 1
            return v:true   
        elseif getline('.')[col('.') - 2] =~# '\s'
            return v:true
        elseif getline('.')[col('.') - 2] =~# ';'
            return v:true
        endif
        return v:false
    endfunction


    " <TAB>: completion. ddc.vim
    inoremap <silent><expr> <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : JudgeDoComplation() ? '<TAB>' : ddc#map#manual_complete()

    
    " 補完の動作をいい感じに
    " leximaとの干渉があるので、このタイミングでleximaのルールを設定し、上書き
    call lexima#set_default_rules()
    execute printf("inoremap <expr><silent> <CR> pum#visible() ? pum#map#confirm() : lexima#expand(%s, 'i')",
              \ string(lexima#string#to_mappable('<CR>'))
              \ )
    

    " コマンド補完
    call ddc#custom#patch_global(#{
            \   ui: 'pum',
            \   autoCompleteEvents: [
            \     'InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged',
            \   ],
            \   cmdlineSources: {
            \     ':': ['cmdline', 'cmdline-history']
            \   },
            \ })
    nnoremap :       <Cmd>call CommandlinePre()<CR>:

    function! CommandlinePre() abort
        cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
        cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
        cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
        cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
        cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
        cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

        autocmd User DDCCmdlineLeave ++once call CommandlinePost()

        " Enable command line completion for the buffer
        call ddc#enable_cmdline_completion()
    endfunction
    function! CommandlinePost() abort
        silent! cunmap <Tab>
        silent! cunmap <S-Tab>
        silent! cunmap <C-n>
        silent! cunmap <C-p>
        silent! cunmap <C-y>
        silent! cunmap <C-e>
    endfunction

    " Use ddc.
    call ddc#enable()
'''

[[plugins]]
repo='hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
hook_add='''
    " スニペットファイルの場所
    let g:vsnip_snippet_dir=$VIM_CONFIG_DIR .. '/snippets'
    inoremap <expr> <C-k> vsnip#expandable() ? "<Plug>(vsnip-expand)" : "<C-k>"
'''

[[plugins]]
repo='hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'
hook_source='''
    autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
'''

